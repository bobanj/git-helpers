#!/usr/bin/env ruby
require "tempfile.rb"

INTEGRATION_BRANCH="sprint"
PRESERVE_ALWAYS=[INTEGRATION_BRANCH] + %w[staging master HEAD]
EDITOR=ENV['EDITOR'] || 'vim'

puts "Fetching and pruning all remotes"
`git remote`.each do |remote|
  system("git fetch #{remote}")
  system("git remote prune #{remote}")
end
branches=%x(git for-each-ref).map do |branch_name|
  next unless %r{.+(refs/(heads|remotes).+$)}.match(branch_name)
  $1
end.compact

file = Tempfile.new("cleanup-branch")

file.puts "# The following branches have been merged in to refs/remotes/origin/#{INTEGRATION_BRANCH}"
file.puts "# To delete the branches, delete them from this list, and then save and quit"

branch_candidates = []
branches.each do |branch|
  next if %r(/(#{PRESERVE_ALWAYS * '|'})$) =~ branch
  next unless `git rev-list origin/#{INTEGRATION_BRANCH}..#{branch}`.strip.empty?
  branch_candidates << branch
  file.puts branch
end
file.close
system("#{EDITOR} #{file.path}")
preserve_branches = File.read(file.path).split("\n").grep(/^[^#].+/)
file.delete

unless (erroneous_branches = (preserve_branches - branch_candidates)).empty?
  puts <<EOF
Error! unrecognized branches:
#{erroneous_branches.map{|b| " - #{b}"} * "\n"}
EOF
  exit 1
end

branches_for_deletion = (branch_candidates - preserve_branches)
puts <<EOF
Deleting branches:
#{branches_for_deletion.map{|b| " - #{b}"} * "\n"}
EOF

branches_for_deletion.each do |branch_for_deletion|
  case branch_for_deletion
  when %r(^refs/remotes/([^/]+)/(.+)$)
    remote, branch = $1, $2
    system("git push #{remote} :#{branch}")
  when %r(^refs/heads/(.+)$)
    system("git b -D #{$1}")
  else
    puts "I don't know how to delete #{branch_for_deletion}"
  end
end
