#!/usr/bin/env ruby
require "tempfile.rb"

INTEGRATION_BRANCH="sprint"
PRESERVE_ALWAYS=[INTEGRATION_BRANCH] + %w[staging master HEAD]
EDITOR=ENV['EDITOR'] || 'vim'


class GitCleanBranchesRunner
  def initialize(args, output = STDOUT, error = STDERR)
    @output, @error = output, error
  end

  def fetch_and_prune
    puts "Fetching and pruning all remotes"
    `git remote`.each do |remote|
      system("git fetch #{remote}")
      system("git remote prune #{remote}")
    end
  end

  def merged_branches
    @merged_branches ||= (
      candidates = []
      branches.each do |branch|
        next if %r(/(#{PRESERVE_ALWAYS * '|'})$) =~ branch
        next unless `git rev-list origin/#{INTEGRATION_BRANCH}..#{branch}`.strip.empty?
        candidates << branch
      end
    )
  end

  def branches
    %x(git for-each-ref).map do |branch_name|
      next unless %r{.+(refs/(heads|remotes).+$)}.match(branch_name)
      $1
    end.compact
  end


  def branch_candidates
    merged_branches
  end

  def edit_branch_list
    file = Tempfile.new("cleanup-branch")
    file.puts <<-EOF
# The following branches have been merged in to refs/remotes/origin/#{INTEGRATION_BRANCH}
# To delete the branches, delete them from this list, and then save and quit
#{branch_candidates * "\n"}
EOF
    file.close
    system("#{EDITOR} #{file.path}")
    preserve_branches = File.read(file.path).split("\n").grep(/^[^#].+/)
    file.delete

    unless (erroneous_branches = (preserve_branches - branch_candidates)).empty?
      puts <<EOF
Error! unrecognized branches:
#{erroneous_branches.map{|b| " - #{b}"} * "\n"}
EOF
      exit 1
    end

    preserve_branches
  end

  def delete_branches(branches_for_deletion)
    puts <<EOF
Deleting branches:
#{branches_for_deletion.map{|b| " - #{b}"} * "\n"}
EOF

    branches_for_deletion.each do |branch_for_deletion|
      case branch_for_deletion
      when %r(^refs/remotes/([^/]+)/(.+)$)
        remote, branch = $1, $2
        system("git push #{remote} :#{branch}")
      when %r(^refs/heads/(.+)$)
        system("git b -D #{$1}")
      else
        puts "I don't know how to delete #{branch_for_deletion}"
      end
    end
  end

  def run
    fetch_and_prune
    preserve_branches = edit_branch_list
    delete_branches(branch_candidates - preserve_branches)
  end
end


GitCleanBranchesRunner.new(ARGV).run
